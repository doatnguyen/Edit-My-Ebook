/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.doat.main;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import nl.siegmann.epublib.domain.TOCReference;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author Administrator
 */
public class FindNReplaceDialog extends java.awt.Dialog {

    private int currentSec;
    private boolean isSec;
    private ArrayList<TOCReference> toc = null;
    private int x = 0, y = 1, count = 0, max_chap, current_max_chap;
    private int min, max;
    private String find = null, replace = "";
    private boolean isChange=false;

    /**
     * Creates new form FindNReplaceDialog
     */
    public FindNReplaceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public ArrayList<TOCReference> getToc() {
        return toc;
    }

    public boolean isHasChange() {
        return isChange;
    }

    public void setData(ArrayList<TOCReference> toc, boolean isSec, int currentSec, int max_chap) {
        this.toc = toc;
        this.currentSec = currentSec;
        this.isSec = isSec;
        if (!isSec) {
            com_sec_choice.setVisible(false);
            txt_find_max_chap.setText(max_chap + "");
        } else {
            txt_find_max_chap.setText(toc.get(currentSec).getChildren().size() + "");
            current_max_chap = toc.get(currentSec).getChildren().size();
        }
        this.max_chap = max_chap;
        pan_found_count.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_find_replace = new javax.swing.JButton();
        txt_source = new javax.swing.JTextField();
        txt_replace = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ch_isTitle = new javax.swing.JCheckBox();
        com_sec_choice = new javax.swing.JComboBox<>();
        pan_found_count = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        txt_found_number = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txt_find_min_chap = new javax.swing.JFormattedTextField();
        txt_find_max_chap = new javax.swing.JFormattedTextField();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        btn_find_replace.setText("Find n Replace");
        btn_find_replace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_find_replaceActionPerformed(evt);
            }
        });

        jLabel1.setText("Find");

        jLabel2.setText("Replace");

        ch_isTitle.setText("Include Tile");

        com_sec_choice.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Current Section", "All Section" }));
        com_sec_choice.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                com_sec_choiceItemStateChanged(evt);
            }
        });

        pan_found_count.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setText("Found");

        txt_found_number.setForeground(new java.awt.Color(255, 0, 0));
        txt_found_number.setText("jLabel4");

        javax.swing.GroupLayout pan_found_countLayout = new javax.swing.GroupLayout(pan_found_count);
        pan_found_count.setLayout(pan_found_countLayout);
        pan_found_countLayout.setHorizontalGroup(
            pan_found_countLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_found_countLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txt_found_number)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pan_found_countLayout.setVerticalGroup(
            pan_found_countLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pan_found_countLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pan_found_countLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txt_found_number))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel4.setText("To");

        jLabel5.setText("From");

        txt_find_min_chap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));
        txt_find_min_chap.setText("1");

        txt_find_max_chap.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pan_found_count, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_source)
                    .addComponent(txt_replace)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 342, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ch_isTitle)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txt_find_min_chap, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txt_find_max_chap, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btn_find_replace))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(com_sec_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txt_source, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txt_replace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ch_isTitle)
                            .addComponent(com_sec_choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel5)
                        .addComponent(txt_find_min_chap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txt_find_max_chap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btn_find_replace)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(pan_found_count, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    private void btn_find_replaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_find_replaceActionPerformed
        // TODO add your handling code here:

        try {
            find = txt_source.getText();
            if (find.length() < 1) {
                showErrorMess("Find text too short");
                return;
            }
        } catch (NullPointerException e) {
            showErrorMess("Find text is not underfine");
            return;
        }
        try {
            replace = txt_replace.getText();
        } catch (NullPointerException e) {
            showErrorMess("Replace text is not underfine");
            return;
        }
        try {
            min = Integer.parseInt(txt_find_min_chap.getText());
            if (min < 1 || min > current_max_chap) {
                showErrorMess("Min <1 or Min>" + current_max_chap);
                return;
            }
        } catch (NullPointerException e) {
            showErrorMess("Underfine");
            txt_find_min_chap.setText("1");
            return;
        }
        try {
            max = Integer.parseInt(txt_find_max_chap.getText());
            if (max > current_max_chap || max < min) {
                showErrorMess("Max >" + current_max_chap + " or Max<" + min);
                return;
            }
        } catch (NullPointerException e) {
            showErrorMess("Underfine");
            txt_find_min_chap.setText(current_max_chap + "");
        }

        if (find != null) {
            if (com_sec_choice.getSelectedIndex() == 0) {
                x = currentSec;
                y = currentSec + 1;
            } else if (com_sec_choice.getSelectedIndex() == 1) {
                x = 0;
                y = toc.size();
            }
            btn_find_replace.setEnabled(false);
            pan_found_count.setVisible(true);
            this.pack();
            Thread t = new Thread(new Runnable() {
                @Override
                public void run() {
                    ArrayList<TOCReference> list = new ArrayList<>();
                    ArrayList<TOCReference> Res_list = new ArrayList<>();
                    int count_chap = 0;
                    count = 0;
                    for (int i = x; i < y; i++) {
                        if (isSec) {
                            list.addAll(toc.get(i).getChildren());
                        } else {
                            list.addAll(toc);
                        }
                        String title, content;
                        for (TOCReference t : list) {
                            title = t.getTitle();
                            try {
                                content = new String(t.getResource().getData(), "UTF-8");
                            } catch (IOException ex) {
                                content = "No Data";
                            }
                            if (count_chap < max) {
                                if (ch_isTitle.isSelected()) {
                                    count += StringUtils.countMatches(title, find);
                                    title = title.replaceAll(find, replace);
                                }
                                count += StringUtils.countMatches(content, find);
                                content = content.replaceAll(find, replace);
                                txt_found_number.setText(count + "");
                                count_chap++;
                            }
                            t.setTitle(title);
                            t.getResource().setData(content.getBytes(Charset.forName("utf-8")));
                            Res_list.add(t);
                        }
                        if (isSec) {
                            toc.get(i).setChildren(Res_list);
                        } else {
                            toc = Res_list;
                        }
                        toc.get(i).setChildren(Res_list);
                        list = new ArrayList<>();
                        Res_list = new ArrayList<>();
                    }
                    if(count!=0) isChange=true;
                    btn_find_replace.setEnabled(true);
                }
            });
            t.start();
        }
    }//GEN-LAST:event_btn_find_replaceActionPerformed

    private void com_sec_choiceItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_com_sec_choiceItemStateChanged
        // TODO add your handling code here:
        int item = com_sec_choice.getSelectedIndex();
        if (item == 0) {
            txt_find_max_chap.setText(toc.get(currentSec).getChildren().size() + "");
            current_max_chap = toc.get(currentSec).getChildren().size();
        } else {
            txt_find_max_chap.setText(max_chap + "");
            current_max_chap = max_chap;
        }
    }//GEN-LAST:event_com_sec_choiceItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FindNReplaceDialog dialog = new FindNReplaceDialog(new java.awt.Frame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public void showErrorMess(String error) {
        if (error == null) {
            JOptionPane.showMessageDialog(this, "Đã có lỗi xảy ra", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showMessageDialog(this, error, "Lỗi", JOptionPane.ERROR_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_find_replace;
    private javax.swing.JCheckBox ch_isTitle;
    private javax.swing.JComboBox<String> com_sec_choice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel pan_found_count;
    private javax.swing.JFormattedTextField txt_find_max_chap;
    private javax.swing.JFormattedTextField txt_find_min_chap;
    private javax.swing.JLabel txt_found_number;
    private javax.swing.JTextField txt_replace;
    private javax.swing.JTextField txt_source;
    // End of variables declaration//GEN-END:variables
}
